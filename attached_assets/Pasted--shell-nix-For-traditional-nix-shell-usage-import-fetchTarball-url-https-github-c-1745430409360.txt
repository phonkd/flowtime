# shell.nix - For traditional nix-shell usage
(import (
  fetchTarball {
    url = "https://github.com/edolstra/flake-compat/archive/master.tar.gz";
    sha256 = "19d2z6xsvpxm184m41qrpi1bplilwipgnzv9jy17fgw421785q1m";
  }
) {
  src = ./.;
}).shellNix
          config = mkIf cfg.enable {
            users.users.${cfg.user} = {
              isSystemUser = true;
              group = cfg.group;
              description = "Hypnosis Audio Platform service user";
              createHome = true;
              home = "/var/lib/hypnosis-audio-platform";
            };

            users.groups.${cfg.group} = {};

            # PostgreSQL service if needed
            services.postgresql = mkIf cfg.useDatabase {
              enable = true;
              ensureDatabases = mkIf cfg.createDatabase [ "hypnosis_db" ];
              ensureUsers = mkIf cfg.createDatabase [
                {
                  name = "hypnosis";
                  ensurePermissions = {
                    "DATABASE hypnosis_db" = "ALL PRIVILEGES";
                  };
                }
              ];
              authentication = ''
                local hypnosis_db hypnosis trust
                host hypnosis_db hypnosis 127.0.0.1/32 trust
                host hypnosis_db hypnosis ::1/128 trust
              '';
            };

            systemd.services.hypnosis-audio-platform = {
              description = "Hypnosis Audio Platform";
              wantedBy = [ "multi-user.target" ];
              after = mkIf cfg.useDatabase [ "postgresql.service" ];
              requires = mkIf cfg.useDatabase [ "postgresql.service" ];

              environment = {
                NODE_ENV = "production";
                PORT = toString cfg.port;
                USE_DATABASE = toString cfg.useDatabase;
                DATABASE_URL = cfg.databaseUrl;
                SESSION_SECRET = cfg.sessionSecret;
              };

              serviceConfig = {
                User = cfg.user;
                Group = cfg.group;
                ExecStart = "${self.packages.${pkgs.system}.hypnosisAudioPlatform}/bin/hypnosis-audio-platform";
                Restart = "always";
                WorkingDirectory = "/var/lib/hypnosis-audio-platform";
              };

              preStart = mkIf (cfg.useDatabase && cfg.createSampleData) ''
                # Create sample data if user table is empty
                USER_COUNT=$(${pkgs.postgresql}/bin/psql -U hypnosis -d hypnosis_db -c \
                "SELECT COUNT(*) FROM pg_tables WHERE tablename = 'users'" -t | xargs)
                
                if [ "$USER_COUNT" -eq 0 ]; then
                  echo "Initializing database schema and sample data..."
                  ${pkgs.postgresql}/bin/psql -U hypnosis -d hypnosis_db -f ${self.packages.${pkgs.system}.hypnosisAudioPlatform}/lib/hypnosis-audio-platform/init-db.sql
                fi
              '';
            };

            # Optional: Nginx reverse proxy
            services.nginx = {
              enable = true;
              virtualHosts."hypnosis.local" = {
                locations."/" = {
                  proxyPass = "http://127.0.0.1:${toString cfg.port}";
                  proxyWebsockets = true;
                };
              };
            };

            # Open firewall port
            networking.firewall.allowedTCPPorts = [ cfg.port 80 443 ];
          };
        };
    };
}
Manage Imports
Packagers manage language-specific dependencies for your project. These can be imported directly from your codebase.

@hookform/resolvers
5.0.1
@jridgewell/trace-mapping
0.3.25
@neondatabase/serverless
1.0.0
@radix-ui/react-accordion
1.2.8
@radix-ui/react-alert-dialog
1.1.11
@radix-ui/react-aspect-ratio
1.1.4
@radix-ui/react-avatar
1.1.7
@radix-ui/react-checkbox
@radix-ui/react-collapsible
1.1.8
@radix-ui/react-context-menu
@radix-ui/react-dialog
@radix-ui/react-dropdown-menu
@radix-ui/react-hover-card
@radix-ui/react-label
@radix-ui/react-menubar
@radix-ui/react-navigation-menu
@radix-ui/react-popover
@radix-ui/react-progress
@radix-ui/react-radio-group
@radix-ui/react-scroll-area
@radix-ui/react-select
2.2.2
@radix-ui/react-separator
