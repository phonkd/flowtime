name: Docker Compose Build and Push to GHCR

on:
  push:
    branches: [ "main" ]
    # Publish semver tags as releases
    tags: [ 'v*.*.*' ]
  pull_request:
    branches: [ "main" ]

env:
  # Use GitHub Container Registry
  REGISTRY: ghcr.io
  # github.repository as <account>/<repo>
  BASE_IMAGE_NAME: ${{ github.repository }}
  APP_IMAGE_NAME: ${{ github.repository }}-app
  DB_IMAGE_NAME: ${{ github.repository }}-db

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      # This is needed for GitHub token authentication to GHCR
      id-token: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      # Login to GitHub Container Registry
      - name: Log into registry ${{ env.REGISTRY }}
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Extract metadata (tags, labels) for Docker
      - name: Extract Docker metadata for app
        id: meta-app
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.REGISTRY }}/${{ env.APP_IMAGE_NAME }}
          tags: |
            type=raw,value=latest,enable=${{ github.ref == format('refs/heads/{0}', 'main') }}
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,format=short

      - name: Extract Docker metadata for db
        id: meta-db
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.REGISTRY }}/${{ env.DB_IMAGE_NAME }}
          tags: |
            type=raw,value=latest,enable=${{ github.ref == format('refs/heads/{0}', 'main') }}
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,format=short

      # Build and push App Docker image
      - name: Build and push App Docker image
        id: build-and-push-app
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./Dockerfile
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta-app.outputs.tags }}
          labels: ${{ steps.meta-app.outputs.labels }}
          build-args: |
            NODE_ENV=production

      # Build and push DB Docker image with sample data
      - name: Build and push DB Docker image
        id: build-and-push-db
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./Dockerfile.db
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta-db.outputs.tags }}
          labels: ${{ steps.meta-db.outputs.labels }}

      # Generate and push the docker-compose.yml file for deployment
      - name: Generate deployment docker-compose file
        if: github.event_name != 'pull_request'
        run: |
          APP_IMAGE="${{ env.REGISTRY }}/${{ env.APP_IMAGE_NAME }}:latest"
          DB_IMAGE="${{ env.REGISTRY }}/${{ env.DB_IMAGE_NAME }}:latest"
          
          cat > docker-compose.prod.yml <<EOF
          version: '3.8'
          
          services:
            postgres:
              image: ${DB_IMAGE}
              container_name: hypnosis-db
              restart: unless-stopped
              volumes:
                - postgres_data:/var/lib/postgresql/data
              environment:
                POSTGRES_USER: hypnosis
                POSTGRES_PASSWORD: hypnosis_password
                POSTGRES_DB: hypnosis_db
              ports:
                - "5432:5432"
              healthcheck:
                test: ["CMD-SHELL", "pg_isready -U hypnosis"]
                interval: 10s
                timeout: 5s
                retries: 5
          
            app:
              image: ${APP_IMAGE}
              container_name: hypnosis-app
              restart: unless-stopped
              volumes:
                - ./uploads:/app/uploads
              environment:
                - NODE_ENV=production
                - USE_DATABASE=true
                - DATABASE_URL=postgresql://hypnosis:hypnosis_password@postgres:5432/hypnosis_db
                - SESSION_SECRET=\${SESSION_SECRET}
              ports:
                - "5000:5000"
              depends_on:
                postgres:
                  condition: service_healthy
          
          volumes:
            postgres_data:
          EOF

      # Upload the production docker-compose file as an artifact
      - name: Upload docker-compose.prod.yml
        if: github.event_name != 'pull_request'
        uses: actions/upload-artifact@v3
        with:
          name: docker-compose-prod
          path: docker-compose.prod.yml
          retention-days: 7