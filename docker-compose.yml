version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:14-alpine
    container_name: hypnosis-db
    restart: unless-stopped
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db.sh:/docker-entrypoint-initdb.d/init-db.sh
    environment:
      POSTGRES_USER: hypnosis
      POSTGRES_PASSWORD: hypnosis_password
      POSTGRES_DB: hypnosis_db
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U hypnosis"]
      interval: 10s
      timeout: 5s
      retries: 5
    # Improve startup behavior
    command: >
      postgres
      -c max_connections=100
      -c shared_buffers=256MB
      -c effective_cache_size=1GB
      -c maintenance_work_mem=64MB
      -c checkpoint_completion_target=0.9
      -c wal_buffers=16MB
      -c default_statistics_target=100
      -c random_page_cost=1.1
      -c effective_io_concurrency=200
      -c work_mem=4MB
      -c min_wal_size=1GB
      -c max_wal_size=4GB
      -c listen_addresses='*'
      -c log_connections=on
      -c log_disconnections=on

  # Node.js Application
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: hypnosis-app
    restart: unless-stopped
    volumes:
      - ./public:/app/public
      - ./uploads:/app/uploads
      # Mount the source code for development
      - ./server:/app/server
      - ./client:/app/client
      - ./shared:/app/shared
    environment:
      # Database settings for Docker Compose
      NODE_ENV: development
      USE_DATABASE: "true"
      # Use explicit host 'postgres' which is the service name in Docker Compose
      POSTGRES_USER: hypnosis
      POSTGRES_PASSWORD: hypnosis_password
      POSTGRES_DB: hypnosis_db
      POSTGRES_HOST: postgres
      # Full connection string with explicit service name as host
      DATABASE_URL: postgresql://hypnosis:hypnosis_password@postgres:5432/hypnosis_db
      SESSION_SECRET: hypnosis-app-secret-key-docker
    # Use environment variables from .env file as override
    env_file:
      - .env
    ports:
      - "5000:5000"
    depends_on:
      postgres:
        condition: service_healthy

volumes:
  postgres_data: