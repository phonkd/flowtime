version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:14-alpine
    container_name: hypnosis-db
    restart: unless-stopped
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db.sh:/docker-entrypoint-initdb.d/init-db.sh
    environment:
      POSTGRES_USER: hypnosis
      POSTGRES_PASSWORD: hypnosis_password
      POSTGRES_DB: hypnosis_db
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U hypnosis"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - hypnosis-network

  # Node.js Application
  app:
    image: node:18-alpine
    container_name: hypnosis-app
    restart: unless-stopped
    working_dir: /app
    volumes:
      - .:/app
      - node_modules:/app/node_modules
      - ./docker-entrypoint.sh:/docker-entrypoint.sh
    # Use a direct reference to the PostgreSQL host using the service name
    environment:
      NODE_ENV: development
      USE_DATABASE: "true"
      # Important: Format the DATABASE_URL without wss:// to prevent WebSocket connection
      DATABASE_URL: postgresql://hypnosis:hypnosis_password@postgres:5432/hypnosis_db
      SESSION_SECRET: hypnosis-app-secret-key-2024
    ports:
      - "5000:5000"
    depends_on:
      postgres:
        condition: service_healthy
    # Make the entrypoint script executable and use it
    entrypoint: sh -c "chmod +x /docker-entrypoint.sh && /docker-entrypoint.sh"
    # Command to run after entrypoint
    command: npm run dev
    networks:
      - hypnosis-network

volumes:
  postgres_data:
  node_modules:

networks:
  hypnosis-network:
    driver: bridge